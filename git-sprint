#!/bin/sh
#
# enable debug mode
if [ "$DEBUG" = "yes" ]; then
	set -x
fi

# Setup the GITSPRINT_DIR for different operating systems.
# This is mostly to make sure that we get the correct directory when the
# git-sprint file is a symbolic link
case $(uname -s) in
Linux)
	export GITSPRINT_DIR=$(dirname "$(readlink -e "$0")")
	;;
FreeBSD|OpenBSD|NetBSD)
	export FLAGS_GETOPT_CMD='/usr/local/bin/getopt'
	export GITSPRINT_DIR=$(dirname "$(realpath "$0")")
	;;
Darwin)
	PRG="$0"
	while [ -h "$PRG" ]; do
		link=$(readlink "$PRG")
		if expr "$link" : '/.*' > /dev/null; then
			PRG="$link"
		else
			PRG="$(dirname "$PRG")/$link"
		fi
	done
	export GITSPRINT_DIR=$(dirname "$PRG")
	;;
*MINGW*)
	export GITSPRINT_DIR=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")
	pwd () {
		builtin pwd -W
	}
	;;
*)
	# The sed expression here replaces all backslashes by forward slashes.
	# This helps our Windows users, while not bothering our Unix users.)
	export GITSPRINT_DIR=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")
	;;
esac

# Extra environment settings
if [ -f ~/.gitsprint_export ]; then
	if grep -E 'GITSPRINT_FLAG_(SHOWCOMMANDS)' ~/.gitsprint_export > /dev/null; then
		echo "Using environment variables for \"showcommands\" in ~/.gitsprint_export has deprecated, use git config instead."
		echo ""
		exit 1;
	else
		. ~/.gitsprint_export
	fi
fi

usage() {
    echo "usage: git sprint <subcommand>"
    echo 
    echo "Available subcommands are:"
    echo "    init      Initialize a new git repo with support for the sprint method."
    echo "    config    Manage your git-sprint configuration."
    echo "    create    Create a sprint branch"
    echo "    end       Finish working with a sprint branch."
    echo "    version   Shows version information."
    echo
    echo "Try 'git sprint <subcommand> help' for details."
}

main() {
    if [ $# -lt 1 ]; then
        usage
		echo "no subcommands"
        exit 1
    fi

    # Use the shFlags project to parse the command line arguments
	. "$GITSPRINT_DIR/gitsprint-shFlags"
	FLAGS_PARENT="git sprint"

	# Load common functionality
	. "$GITSPRINT_DIR/gitsprint-common"

	# allow user to request git action logging
	DEFINE_boolean 'showcommands' false 'Show actions taken (git commands)'
	# but if the user prefers that the logging is always on,
	# use the environmental variables.
	gitsprint_override_flag_boolean 'showcommands' 'showcommands'

	# Sanity checks
	SUBCOMMAND="$1"; shift
    if [ "${SUBCOMMAND}" = "create" ] || [ "${SUBDOMMAND}" = "end" ]; then
        _current_branch=$(git_current_branch)
    fi

	if [ ! -e "$GITSPRINT_DIR/git-sprint-$SUBCOMMAND" ]; then
		usage
		echo "no subcommands exists"
		exit 1
	fi

	# Run command
	. "$GITSPRINT_DIR/git-sprint-$SUBCOMMAND"
	FLAGS_PARENT="git sprint $SUBCOMMAND"

	if [ -z "${SUBACTION}" ]; then
		# If the first argument is a flag, it starts with '-', we interpret this
		# argument as a flag for the default command.
		if startswith "$1" "-"; then
			SUBACTION="default"
		elif [ -z "$1" ]; then
			SUBACTION="default"
		else
			SUBACTION="$1"
			shift
			# Do not allow direct calls to subactions with an underscore.
			if $(contains "$SUBACTION" "_"); then
				warn "Unknown subcommand: '$SUBACTION'"
				usage
				exit 1
			fi
			# Replace the dash with an underscore as bash doesn't allow a dash
			# in the function name.
			SUBACTION=$(echo "$SUBACTION" |tr '-' '_')
		fi
	fi

	if ! type "cmd_$SUBACTION" >/dev/null 2>&1; then
		warn "Unknown subcommand: '$SUBACTION'"
		usage
		exit 1
	fi

	# Run the specified action
	if [ $SUBACTION != "help" ] && [ $SUBCOMMAND != "init" ]; then
		initialize
	fi
	if [ $SUBACTION != 'default' ]; then
		FLAGS_PARENT="git sprint $SUBCOMMAND $SUBACTION"
	fi

	cmd_$SUBACTION "$@" "${_short_branch_name}"
}
main "$@"